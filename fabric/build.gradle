import java.util.stream.Collectors

plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

def deps = [
        "fabric-command-api-v2",
        "fabric-lifecycle-events-v1",
        "fabric-key-binding-api-v1"
]

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    deps.forEach {
        modCompileOnly fabricApi.module(it, rootProject.fabric_api_version)
    }
    modLocalRuntime("net.fabricmc.fabric-api:fabric-api:0.108.0+1.21.3")

    common(project(path: ":common", configuration: "namedElements"))
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric"))
    shadowCommon(project(path: ":api", configuration: "transformProductionFabric"))
}

processResources {
    from(project(":common").tasks.named("processResources"))
    inputs.property "version", project.version
    inputs.property "fabricDeps", deps.stream().map { "\"${it}\": \"*\"" }.collect(Collectors.joining(", ")) + ","

    filesMatching("fabric.mod.json") {
        expand(inputs.properties)
    }
}

tasks.shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

tasks.remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier = null
}

tasks.jar {
    archiveClassifier = "dev"
}

tasks.sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
    def apiSources = project(":api").sourcesJar
    dependsOn apiSources
    from apiSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}
